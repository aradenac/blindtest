#!/usr/bin/env node

/**
 * Module dependencies.
 */

var {app, httpApp} = require('../app');
var debug = require('debug')('bt-app:server');
var http = require('http');
var https = require('https');
var sessions = require('../sessions.js');
var User = require('../user.js');
var util = require('util');
const base64url = require('base64url');
var fs = require('fs');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '443');
app.set('port', port);

/**
 * Create HTTP server.
 */

//var server = http.createServer(app);
var path = '/etc/letsencrypt/live/www.whatsong.fr/';
var server = https.createServer({
  key: fs.readFileSync(path + 'privkey.pem'),
  cert: fs.readFileSync(path + 'fullchain.pem')
}, app)

http.createServer(httpApp).listen(httpApp.get('port'), ()=>{
  debug(`HTTP server listening on port ${httpApp.get('port')}`)
})

var io = require('socket.io')(server);


// socket IO events
io.on('connection', (socket) => {
  debug('a user connected, waiting for its cookie');

  socket.on('setCookie', (cookie)=>{
    var user;
    debug(`cookie received: ${cookie}`)

    cookie = JSON.parse(cookie)
    user = new User();

    var {userSession} = cookie;
    debug(`userSession ${userSession}`);

    var userSession = JSON.parse(base64url.decode(userSession));
    debug(`${util.inspect(userSession)}`);
    user.name = userSession.pseudo;
    user.socket = socket;

    sessions[0].addPlayer(user);

    socket.on('disconnect', ()=>{
      debug("player disconnect");
      sessions[0].delPlayer(user.name)
    });

    socket.emit('loadNextSong');

    socket.on('clientSongLoaded', () => {
      socket.emit('playSong');
    })
  })
})



/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
